---
title: "Untitled"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(readxl)
library(purrr)
library(stringr)
```

```{r}
all_raw <- read_excel("data/ข้อมูลการมาตรวจแต่ละครั้ง_รวม 4 มิย 2568.xlsx")

template <- read_csv("visit_data_template.csv")


# sample_raw <- read_csv("sample_data.csv")
```

```{r recolname_raw}
# recolname

#colnames(sample_raw)

colnames_map <- c("HN" = "hn",
                  "ครั้งที่มาตรวจ" = "visit_number",
                  "วันที่มาตรวจ" = "visit_date",
                  "สิ่งผิดปกติที่อยากบอก" = "patient_note",
                  "แน่นหน้าอกตรงกลาง" = "chest_tightness",
                  "ระบบประสาทผิดปกติ" = "nervous_system",
                  "ปัสสาวะผิดปกติ" = "urinal_abnormal",
                  "ปวดหัว" = "headache",
                  "เวียนหัว" = "dizziness",
                  "หอบเหนื่อย" = "dypsnea",
                  "ขาบวม" = "leg_swelling",
                  "บวมที่ใบหน้า" = "face_swelling",
                  "CC" = "cc",
                  "PI" = "pi",
                  "SBP" = "bp_sys",
                  "DBP" = "bp_dia",
                  "PR" = "pulse",
                  "waist circum" = "waist",
                  "BW" = "weight",
                  "Height" = "height",
                  "HEENT" = "heent",
                  "Heart" = "heart",
                  "Lung" = "lungs",
                  "Abdomen" = "abd",
                  "Ext" = "ext",
                  "N/S" = "ns",
                  "Na" = "na",
                  "HbA1C" = "hba1c",
                  "BS" = "fbs",
                  "Chol" = "cho",
                  "LDL" = "ldl",
                  "TG" = "tg",
                  "HDL" = "hdl",
                  "นัดครั้งต่อไป" = "follow_up_date",
                  "คะแนนควบคุมBP" = "bp_control_score",
                  "คะแนนควบคุมน้ำหนัก" = "weight_control_score",
                  "คะแนนพฤติกรรมดูแลตนเอง" = "self_care_score",
                  "คะแนนวัดBPที่บ้าน" = "home_bp_score",
                  "HBPMตามเป้า" = "hbpm_target",
                  "Diuretics" = "diuretics",
                  "ACEIs" = "aceis",
                  "ARBs" = "arbs",
                  "CCBs" = "ccbs",
                  "ไม่ขาดยา" = "alway_take_medicine",
                  "คุมอาหารเค็ม" = "salty_control",
                  "ออกกำลังกาย" = "excercise"
                  )


```

```{r recolnamefunction}
colnames(all_raw) <- ifelse(colnames(all_raw) %in% names(colnames_map), colnames_map[colnames(all_raw)], colnames(all_raw))

# write csv
# write_csv(all_raw, "data/new_data.csv")
```

```{r colreplace}
new_data <- read_csv("data/new_data.csv")

# change บ่อยครั้ง นานๆครั้ง ไม่มี

cols_to_replace <- c("chest_tightness", "nervous_system", "urinal_abnormal",
                     "headache", "dizziness", "dypsnea", "leg_swelling",
                     "face_swelling" )
new_data <- new_data %>%
  mutate(across(all_of(cols_to_replace), ~ recode(., 
                                              "ไม่มี" = "no", 
                                              "นานๆครั้ง" = "sometimes", 
                                              "บ่อยครั้ง" = "often")))

# Need to regret data
# Columns to clean
cols_to_clean <- c("chest_tightness", "nervous_system", "urinal_abnormal",
                   "headache", "dizziness", "dypsnea", "leg_swelling", "face_swelling")

# Define standard replacements
dict <- c("ไม่มี" = "no",
          "ไม่มีไม่มี" = "no",
          "ไม่มีไม่" = "no",
          "ไม่มีv" = "no",
          "ไม่มีอ" = "no",
          "v" = "no",
          "นานๆครั้ง" = "sometimes",
          "นานครั้ง" = "sometimes",
          "บ่อยครั้ง" = "often",
          "ไไม่มี" = "no",
          "2-3 ครั้งต" = "sometimes",
          "นานครั้ง เ" = "sometimes",
          "อ" = "no",
          "ไม่u" = "no",
          "ไม่มีล" = "no",
          "ไม่มีไ" = "no",
          "ออไม่ม" = "no",
          "vvไม่ม" = "no",
          "บ่อยครั้งส" = "sometimes",
          "มี" = "sometimes",
          "v" = "no"
          )

new_data <- new_data %>%
  mutate(across(all_of(cols_to_clean), ~ .x |> 
                  str_replace_all("[\r\n\\\\]", "") |>  # remove \r \n \\ etc.
                  str_trim() |>                          # remove leading/trailing spaces
                  str_replace_all("ไม่มี+", "ไม่มี") |>  # multiple ไม่มี → ไม่มี
                  str_replace_all("นานๆครั้ง", "นานๆครั้ง") |>  # standardize if needed
                  str_replace_all("บ่อยครั้ง", "บ่อยครั้ง") |>
                  recode(!!!dict)                         # apply translation
  ))




```

```{r checkunique}
# check unique 


cols_to_check <- c("chest_tightness", "nervous_system", "urinal_abnormal",
                   "headache", "dizziness", "dypsnea", "leg_swelling",
                   "face_swelling")

cols_to_check <- c("heent","heart","lungs","abd", "ext", "ns")

# Show unique values in each specified column
new_data %>%
  select(all_of(cols_to_check)) %>%
  map(unique)
```

```{r change cc}
# change cc


# new_data <- new_data %>%
#   mutate(
#     cc_early_visit = if_else(str_starts(cc, "มาก่อนนัด"),
#                              str_extract(cc, "(?<=เพราะ).*"),
#                              NA_character_),
#     cc_late_visit = if_else(str_starts(cc, "มาหลังนัด"),
#                             str_extract(cc, "(?<=เพราะ).*"),
#                             NA_character_),
#     cc = case_when(
#       str_trim(cc) == "มาตรวจตามนัด" ~ "follow_up",
#       str_starts(cc, "มาก่อนนัด") ~ "early_visit",
#       str_starts(cc, "มาหลังนัด") ~ "late_visit",
#       TRUE ~ cc
#     )
#   )
new_data <- new_data %>%
  mutate(
    # Save original cc for later use
    cc_raw = cc,

    # Classify cc
    cc = case_when(
      str_trim(cc_raw) == "มาตรวจตามนัด" ~ "follow_up",
      str_starts(cc_raw, "มาก่อนนัด") ~ "early_visit",
      str_starts(cc_raw, "มาหลังนัด") ~ "late_visit",
      TRUE ~ "other"
    ),

    # Extract reasons for early/late visits
    cc_early_visit = if_else(cc == "early_visit", 
                             str_extract(cc_raw, "(?<=เพราะ).*"), 
                             NA_character_),

    cc_late_visit = if_else(cc == "late_visit", 
                            str_extract(cc_raw, "(?<=เพราะ).*"), 
                            NA_character_),

    # For class 'other', store original unclassified reason
    cc_other = if_else(cc == "other", cc_raw, NA_character_)
  ) %>%
  select(-cc_raw)  # optional: remove the intermediate backup




unique(new_data$cc)
unique(new_data$cc_early_visit)
unique(new_data$cc_late_visit)

```

```{r change pi}
# change pi

# Define what counts as "normal" based on keywords
normal_keywords <- c("ปกติ", "สบายดี", "ทั่วไปดีขึ้น", "อาการอื่นปกติ", "stable", "ปกตอิดี",
                     "clinical  well being")
manual_other_values <- c("ญาติมารับยาแทน", "ต้องการมารักษา", "สอบถามเรื่องผลตรวจ",
                         "ญาติมา","ไม่มี", "คุมอาหารได้ดี บันทึกความดันที่บ้าน BP ดีบางครั้งต่",
                         "หลังนอนรพ. 1 สัปดาหืที่ผ่านมา ปรับยาและให้เครื่องว",
                         "ไม่บวม", "อากาอื่นดี แต่เป็นหวัด","ถอนฟัน 2 ซี่เมื่อวาน เจ็บเล็กน้อย",
                         "สบาดีวัด BP ที่บ้านให้ลูกมารับยา", "มาฟังผลตรวจเลือด",
                         "แผลที่เท้าหาย", "ปวดหัวหายแล้ว",
                         "ปวดข้อดีขึ้น อาหารคุมได้ ออกกำลังกายโดยการเดินแกว่",
                         "ไม่ทราบ"
                         )

new_data <- new_data %>%
  mutate(
    pi_raw = pi,  # keep original for reference

    # classify pi
    pi = case_when(
      str_trim(pi_raw) %in% manual_other_values ~ "other",
      str_detect(pi_raw, str_c(normal_keywords, collapse = "|")) ~ "normal",
      TRUE ~ "abnormal"
    ),

    # assign detailed reasons
    pi_other = if_else(pi == "other", pi_raw, NA_character_),
    pi_abnormal = if_else(pi == "abnormal", pi_raw, NA_character_)
  ) %>%
  select(-pi_raw)  # optional cleanup

unique(new_data$pi)
unique(new_data$pi_abnormal)
unique(new_data$pi_other)
```

```{r wnl}
# Columns to process
exam_cols <- c("heent", "heart", "lungs", "abd", "ext", "ns")

# Define WNL pattern (case-insensitive)
wnl_pattern <- regex("wnl", ignore_case = TRUE)

new_data <- new_data %>%
  # Step 1: create abnormal flag columns
  mutate(across(all_of(exam_cols), 
                .fns = ~ if_else(str_detect(., wnl_pattern), NA_character_, .),
                .names = "{.col}_abnormal")) %>%
  
  # Step 2: overwrite original columns with "wnl"/"abnormal"
  mutate(across(all_of(exam_cols),
                .fns = ~ if_else(str_detect(., wnl_pattern), "wnl", "abnormal")))
```

```{r adherance}


new_data <- new_data %>%
  mutate(
    alway_take_medicine = case_when(
      alway_take_medicine == "ใช่" ~ "yes",
      is.na(alway_take_medicine) ~ NA_character_,
      TRUE ~ "no"
    ),
    salty_control = case_when(
      salty_control == "ใช่" ~ "yes",
      is.na(salty_control) ~ NA_character_,
      TRUE ~ "no"
    ),
    excercise = case_when(
      excercise == "ใช่" ~ "yes",
      is.na(excercise) ~ NA_character_,
      TRUE ~ "no"
    )
  )

```

```{r doctor1}
new_data <- new_data %>%
  mutate(doctor_name = "Doctor1")

```

```{r}

# save csv
write_csv(new_data, "data/new_data.csv")
```

```{r second data}
other_raw <- read_excel("data/ข้อมูลการมาตรวจแต่ละครั้ง_อ.สิทธิชัย.xlsx")
```

```{r}
# recolname

#colnames(sample_raw)

colnames_map <- c("HN" = "hn",
                  "ครั้งที่มาตรวจ" = "visit_number",
                  "วันที่มาตรวจ" = "visit_date",
                  "สิ่งผิดปกติที่อยากบอก" = "patient_note",
                  "แน่นหน้าอกตรงกลาง" = "chest_tightness",
                  "ระบบประสาทผิดปกติ" = "nervous_system",
                  "ปัสสาวะผิดปกติ" = "urinal_abnormal",
                  "ปวดหัว" = "headache",
                  "เวียนหัว" = "dizziness",
                  "หอบเหนื่อย" = "dypsnea",
                  "ขาบวม" = "leg_swelling",
                  "บวมที่ใบหน้า" = "face_swelling",
                  "CC" = "cc",
                  "PI" = "pi",
                  "SBP" = "bp_sys",
                  "DBP" = "bp_dia",
                  "PR" = "pulse",
                  "waist circum" = "waist",
                  "BW" = "weight",
                  "Height" = "height",
                  "HEENT" = "heent",
                  "Heart" = "heart",
                  "Lung" = "lungs",
                  "Abdomen" = "abd",
                  "Ext" = "ext",
                  "N/S" = "ns",
                  "Na" = "na",
                  "HbA1C" = "hba1c",
                  "BS" = "fbs",
                  "Chol" = "cho",
                  "LDL" = "ldl",
                  "TG" = "tg",
                  "HDL" = "hdl",
                  "นัดครั้งต่อไป" = "follow_up_date",
                  "คะแนนควบคุมBP" = "bp_control_score",
                  "คะแนนควบคุมน้ำหนัก" = "weight_control_score",
                  "คะแนนพฤติกรรมดูแลตนเอง" = "self_care_score",
                  "คะแนนวัดBPที่บ้าน" = "home_bp_score",
                  "HBPMตามเป้า" = "hbpm_target",
                  "Diuretics" = "diuretics",
                  "ACEIs" = "aceis",
                  "ARBs" = "arbs",
                  "CCBs" = "ccbs",
                  "ไม่ขาดยา" = "alway_take_medicine",
                  "คุมอาหารเค็ม" = "salty_control",
                  "ออกกำลังกาย" = "excercise"
                  )


```

```{r}
colnames(other_raw) <- ifelse(colnames(other_raw) %in% names(colnames_map), colnames_map[colnames(other_raw)], colnames(other_raw))

# write csv
# write_csv(other_raw, "data/new_data_2.csv")
```

```{r}
new_data_2 <- read_csv("data/new_data_2.csv")
```

```{r}
# change บ่อยครั้ง นานๆครั้ง ไม่มี

cols_to_replace <- c("chest_tightness", "nervous_system", "urinal_abnormal",
                     "headache", "dizziness", "dypsnea", "leg_swelling",
                     "face_swelling" )
new_data_2 <- new_data_2 %>%
  mutate(across(all_of(cols_to_replace), ~ recode(., 
                                              "ไม่มี" = "no", 
                                              "นานๆครั้ง" = "sometimes", 
                                              "บ่อยครั้ง" = "often")))

# Need to regret data
# Columns to clean
cols_to_clean <- c("chest_tightness", "nervous_system", "urinal_abnormal",
                   "headache", "dizziness", "dypsnea", "leg_swelling", "face_swelling")

# Define standard replacements
dict <- c("ไม่มี" = "no",
          "ไม่มีไม่มี" = "no",
          "ไม่มีไม่" = "no",
          "ไม่มีv" = "no",
          "ไม่มีอ" = "no",
          "v" = "no",
          "นานๆครั้ง" = "sometimes",
          "นานครั้ง" = "sometimes",
          "บ่อยครั้ง" = "often",
          "ไไม่มี" = "no",
          "2-3 ครั้งต" = "sometimes",
          "นานครั้ง เ" = "sometimes",
          "อ" = "no",
          "ไม่u" = "no",
          "ไม่มีล" = "no",
          "ไม่มีไ" = "no",
          "ออไม่ม" = "no",
          "vvไม่ม" = "no",
          "บ่อยครั้งส" = "sometimes",
          "มี" = "sometimes",
          "v" = "no"
          )

new_data_2 <- new_data_2 %>%
  mutate(across(all_of(cols_to_clean), ~ .x |> 
                  str_replace_all("[\r\n\\\\]", "") |>  # remove \r \n \\ etc.
                  str_trim() |>                          # remove leading/trailing spaces
                  str_replace_all("ไม่มี+", "ไม่มี") |>  # multiple ไม่มี → ไม่มี
                  str_replace_all("นานๆครั้ง", "นานๆครั้ง") |>  # standardize if needed
                  str_replace_all("บ่อยครั้ง", "บ่อยครั้ง") |>
                  recode(!!!dict)                         # apply translation
  ))

```

```{r}
# check unique 


cols_to_check <- c("chest_tightness", "nervous_system", "urinal_abnormal",
                   "headache", "dizziness", "dypsnea", "leg_swelling",
                   "face_swelling")

cols_to_check <- c("heent","heart","lungs","abd", "ext", "ns")

# Show unique values in each specified column
new_data_2 %>%
  select(all_of(cols_to_check)) %>%
  map(unique)
```

```{r change cc2}
new_data_2 <- new_data_2 %>%
  mutate(
    # Save original cc for later use
    cc_raw = cc,

    # Classify cc
    cc = case_when(
      str_trim(cc_raw) == "มาตรวจตามนัด" ~ "follow_up",
      str_starts(cc_raw, "มาก่อนนัด") ~ "early_visit",
      str_starts(cc_raw, "มาหลังนัด") ~ "late_visit",
      TRUE ~ "other"
    ),

    # Extract reasons for early/late visits
    cc_early_visit = if_else(cc == "early_visit", 
                             str_extract(cc_raw, "(?<=เพราะ).*"), 
                             NA_character_),

    cc_late_visit = if_else(cc == "late_visit", 
                            str_extract(cc_raw, "(?<=เพราะ).*"), 
                            NA_character_),

    # For class 'other', store original unclassified reason
    cc_other = if_else(cc == "other", cc_raw, NA_character_)
  ) %>%
  select(-cc_raw)  # optional: remove the intermediate backup




unique(new_data_2$cc)
unique(new_data_2$cc_early_visit)
unique(new_data_2$cc_late_visit)

```

```{r change pi2}
# Define what counts as "normal" based on keywords
normal_keywords <- c("ปกติ", "สบายดี", "ทั่วไปดีขึ้น", "อาการอื่นปกติ", "stable", "ปกตอิดี",
                     "clinical  well being")
manual_other_values <- c("ญาติมารับยาแทน", "ต้องการมารักษา", "สอบถามเรื่องผลตรวจ",
                         "ญาติมา","ไม่มี", "คุมอาหารได้ดี บันทึกความดันที่บ้าน BP ดีบางครั้งต่",
                         "หลังนอนรพ. 1 สัปดาหืที่ผ่านมา ปรับยาและให้เครื่องว",
                         "ไม่บวม", "อากาอื่นดี แต่เป็นหวัด","ถอนฟัน 2 ซี่เมื่อวาน เจ็บเล็กน้อย",
                         "สบาดีวัด BP ที่บ้านให้ลูกมารับยา", "มาฟังผลตรวจเลือด",
                         "แผลที่เท้าหาย", "ปวดหัวหายแล้ว",
                         "ปวดข้อดีขึ้น อาหารคุมได้ ออกกำลังกายโดยการเดินแกว่",
                         "ไม่ทราบ"
                         )

new_data_2 <- new_data_2 %>%
  mutate(
    pi_raw = pi,  # keep original for reference

    # classify pi
    pi = case_when(
      str_trim(pi_raw) %in% manual_other_values ~ "other",
      str_detect(pi_raw, str_c(normal_keywords, collapse = "|")) ~ "normal",
      TRUE ~ "abnormal"
    ),

    # assign detailed reasons
    pi_other = if_else(pi == "other", pi_raw, NA_character_),
    pi_abnormal = if_else(pi == "abnormal", pi_raw, NA_character_)
  ) %>%
  select(-pi_raw)  # optional cleanup

unique(new_data_2$pi)
unique(new_data_2$pi_abnormal)
unique(new_data_2$pi_other)
```

```{r wnl2}
# Columns to process
exam_cols <- c("heent", "heart", "lungs", "abd", "ext", "ns")

# Define WNL pattern (case-insensitive)
wnl_pattern <- regex("wnl", ignore_case = TRUE)

new_data_2 <- new_data_2 %>%
  # Step 1: create abnormal flag columns
  mutate(across(all_of(exam_cols), 
                .fns = ~ if_else(str_detect(., wnl_pattern), NA_character_, .),
                .names = "{.col}_abnormal")) %>%
  
  # Step 2: overwrite original columns with "wnl"/"abnormal"
  mutate(across(all_of(exam_cols),
                .fns = ~ if_else(str_detect(., wnl_pattern), "wnl", "abnormal")))
```

```{r adherance2}


new_data_2 <- new_data_2 %>%
  mutate(
    alway_take_medicine = case_when(
      alway_take_medicine == "ใช่" ~ "yes",
      is.na(alway_take_medicine) ~ NA_character_,
      TRUE ~ "no"
    ),
    salty_control = case_when(
      salty_control == "ใช่" ~ "yes",
      is.na(salty_control) ~ NA_character_,
      TRUE ~ "no"
    ),
    excercise = case_when(
      excercise == "ใช่" ~ "yes",
      is.na(excercise) ~ NA_character_,
      TRUE ~ "no"
    )
  )

```

```{r doctor2}
new_data_2 <- new_data_2 %>%
  mutate(doctor_name = "Doctor2")

```

```{r}

# save csv
write_csv(new_data_2, "data/new_data_2.csv")
```

```{r join 2 raw data}

# Find common columns
common_cols <- intersect(names(new_data), names(new_data_2))

# Compare types in common columns
type_mismatches <- tibble::tibble(
  column = common_cols,
  new_data_type = sapply(common_cols, function(col) class(new_data[[col]])[1]),
  new_data_2_type = sapply(common_cols, function(col) class(new_data_2[[col]])[1])
) %>%
  dplyr::filter(new_data_type != new_data_2_type)

# Show mismatched columns
type_mismatches

# Convert fbs, hba1c, BUN in new_data_2 to numeric
new_data_2 <- new_data_2 %>%
  mutate(
    fbs = as.numeric(fbs),
    hba1c = as.numeric(hba1c),
    BUN = as.numeric(BUN)
  )

# Convert lungs_abnormal in new_data to character
new_data <- new_data %>%
  mutate(
    lungs_abnormal = as.character(lungs_abnormal)
  )


common_cols <- intersect(names(new_data), names(new_data_2))

new_data_clean <- new_data[, common_cols]
new_data_2_clean <- new_data_2[, common_cols]

combined_data <- bind_rows(new_data_clean, new_data_2_clean)
```

```{r check duplicate row}
new_data$source <- "new_data"
new_data_2$source <- "new_data_2"

combined_data <- bind_rows(new_data, new_data_2)

combined_data_unique <- combined_data %>%
  arrange(hn, visit_date, source) %>%  # "new_data" will come before "new_data_2"
  distinct(hn, visit_date, .keep_all = TRUE)
combined_data_unique <- combined_data_unique %>%
  select(-source)


write.csv(combined_data_unique, "data/clean_data.csv")
```

```{r}
sample_raw |> filter(
  hn == "BA7547"
)

visit_data |> filter(
  hn == "BA7547"
)
```

```{r}
# join data
clean_data <- read_csv("data/clean_data.csv")
visit_data <- read_csv("visit_data_template.csv")
# 1. Keep only matching columns
common_cols <- intersect(names(visit_data), names(clean_data))
new_data_clean <- clean_data[, common_cols]

# 2. Match column types
for (col in common_cols) {
  target_type <- class(visit_data[[col]])[1]
  new_type <- class(new_data_clean[[col]])[1]
  
  if (new_type != target_type) {
    if (target_type == "integer") {
      new_data_clean[[col]] <- as.integer(new_data_clean[[col]])
    } else if (target_type == "numeric") {
      new_data_clean[[col]] <- as.numeric(new_data_clean[[col]])
    } else if (target_type == "character") {
      new_data_clean[[col]] <- as.character(new_data_clean[[col]])
    } else if (target_type == "logical") {
      new_data_clean[[col]] <- as.logical(new_data_clean[[col]])
    } else if (target_type == "factor") {
      new_data_clean[[col]] <- as.factor(new_data_clean[[col]])
    }
  }
}

# 3. Now safely append
visit_data <- dplyr::bind_rows(visit_data, new_data_clean)

# save csv
write_csv(visit_data, "visit_data.csv")

```

```{r}
# Step 1: Read the data
visit_data <- read_csv("visit_data.csv", na = c("", "NA"))

# Step 2: Remove rows where all values are NA
cleaned_data <- visit_data %>% filter(!if_all(everything(), is.na))

# Step 3: Overwrite the original file (or change to "clean_visit_data.csv" if you want to keep the original)
write_csv(cleaned_data, "visit_data.csv")
```

```{r}
visit_data <- visit_data %>%
  arrange(visit_date)

# Define regex for valid HN: two letters + four digits
valid_hn_pattern <- "^[A-Za-z]{2}[0-9]{4}$"

# Filter rows with invalid HN
invalid_hn <- visit_data %>%
  filter(!str_detect(hn, valid_hn_pattern))

# View problematic values
unique(invalid_hn$hn)


miss_hn <- c("ฉ็5654", "ฌณ6271", "ER", "ฎํ6185", "ฌ?4062", "ฤ?0752", "ฌ์8637", "K2238", "K5742", "E6599")

visit_data %>%
  filter(hn %in% miss_hn)
```

```{r}
# ฌณ6271 -> GI6271 delete
# ฌ?4062 -> G?4062 ->
# K2238 -> delete
# ฉ็5654-> CH5654
# ฎํ6185 -> delete
# K5742
# E6599 -> EK6599
# ฌ์8637-> GN8637. need to fix
# ฤ?0752 -> A?0752 -> AM 0752 need to fix


delete_data <- c("ฌณ6271","K2238", "ฎํ6185", "ER",
                 "ฌ?4062", "ฉ็5654", "K5742", "E6599")
visit_data <- visit_data %>% 
  filter(!hn %in% delete_data)

visit_data <- visit_data %>%
  mutate(hn = recode(hn,
                     "ฌ์8637" = "GN8637",
                     "ฤ?0752" = "AM0752"))

# re number of visit
visit_data <- visit_data %>%
  arrange(hn, visit_date) %>%
  group_by(hn) %>%
  mutate(visit_number = row_number()) %>%
  ungroup()


visit_data <- visit_data %>%
  mutate(hn = toupper(hn))
```

```{r}
write_csv(visit_data, "visit_data.csv")
```

```{r}
# Find HNs in visit_data that are not in patient_data
patient_data <- read_csv("patient_data.csv")
visit_data <- read_csv("visit_data.csv")
hn_not_registered <- visit_data %>%
  filter(!hn %in% combined_info$hn) %>%
  distinct(hn)

hn_not_registered
```

```{r patient_info}
patient_info <- read_excel("data/ข้อมูลทั่วไป_รวม 4 มิย 68.xlsx")
patient_info <- patient_info %>%
  rename(
    no = `NO`,
    hn = `HN`,
    titles = `คำนำหน้า`,
    name = `ชื่อ_สกุล`,
    dob = `วันเกิด`,
    gender = `เพศ`,
    phone = `โทรศัพท์`,
    age = `อายุ`,
    address = `ที่อยู่`,
    province = `จังหวัด`,
    amphoe = `อำเภอ`,
    education = `การศึกษา`,
    occupation = `อาชีพ`,
    comobid = `โรคประจำตัว`,
    ekg = `EKG ล่าสุด`,
    echo = `Echo ล่าสุด`,
    eye = `ตรวจตาล่าสุด`,
    drugallergy = `ประวัติการแพ้ยา`,
    caregiver = `ผู้ดูแล`,
    hbpm = `เครื่องวัดBP ที่บ้าน`,
    medfinancial = `สิทธิการรักษา`,
    daystart = `sysdate`,
    new_no = `ลำดับใหม่`
  )

patient_info2 <- read_excel("data/ข้อมูลทั่วไป_อ สิทธิชัย.xlsx")
patient_info2 <- patient_info2 %>%
  rename(
    no = `NO`,
    hn = `HN`,
    titles = `คำนำหน้า`,
    name = `ชื่อ_สกุล`,
    dob = `วันเกิด`,
    gender = `เพศ`,
    phone = `โทรศัพท์`,
    age = `อายุ`,
    address = `ที่อยู่`,
    province = `จังหวัด`,
    amphoe = `อำเภอ`,
    education = `การศึกษา`,
    occupation = `อาชีพ`,
    comobid = `โรคประจำตัว`,
    ekg = `EKG ล่าสุด`,
    echo = `Echo ล่าสุด`,
    eye = `ตรวจตาล่าสุด`,
    drugallergy = `ประวัติการแพ้ยา`,
    caregiver = `ผู้ดูแล`,
    hbpm = `เครื่องวัดBP ที่บ้าน`,
    medfinancial = `สิทธิการรักษา`,
    daystart = `sysdate`,
    new_no = `ลำดับใหม่`
  )

combined_info <- bind_rows(patient_info, patient_info2)
combined_info <- combined_info %>%
  dplyr::distinct(hn, .keep_all = TRUE)

duplicates <- combined_info %>%
  dplyr::group_by(new_no) %>%
  dplyr::filter(n() > 1) %>%
  dplyr::arrange(new_no)

combined_info <- combined_info %>%
  arrange(daystart, new_no) %>%
  mutate(no = row_number())

combined_info <- combined_info %>%
  select(no, hn, titles, gender, name, dob, age, address,
         amphoe, province, phone, email, occupation, comobid,
         ekg, echo, eye, caregiver, hbpm, medfinancial, drugallergy,
         education, daystart)
combined_info <- combined_info %>%
  mutate(hn = toupper(hn))


```

```{r changetitle}

combined_info <- combined_info %>%
  mutate(
    title_clean = case_when(
      titles %in% c("นาย") ~ "Mr",
      titles %in% c("นางสาว", "น.ส.") ~ "Miss",
      titles %in% c("นาง") ~ "Mrs",
      titles %in% c("คุณ") ~ "Ms",
      titles %in% c("ดร.", "ดอกเตอร์", "Dr") ~ "Dr",
      TRUE ~ "Other"
    ),
    other_titles = if_else(title_clean == "Other", titles, NA_character_),
    titles = title_clean
  ) %>%
  select(-title_clean)

combined_info <- combined_info %>%
  mutate(
    gender = case_when(
      gender %in% c("ชาย", "male", "Male") ~ "Male",
      gender %in% c("หญิง", "หญิงตั้งครรภ์", "female", "Female") ~ "Female",
      TRUE ~ "Other"
    )
  )

combined_info <- combined_info %>%
  mutate(
    hbpm = case_when(
      hbpm == "มี" ~ "yes",
      hbpm == "ไม่มี" ~ "no",
      TRUE ~ hbpm  # keep NA or other unexpected values
    )
  )
```

```{r change education}

primary <- c("ป.1", "ป.2", "ป.3", "ป.4","ป4", "ป.5", "ป.6", "ป.7", "ประถมต้น", "ประถม",
             "ประถมศึกษา")
lower_sec_group <- c("ม.1", "ม.2", "ม.3", "ม3" ,"ม.ต้น", "ม.ส.3","มส.3","มศ.3",
                     "ม ต้น")
upper_sec_group <- c("ม.4", "ม.5", "ม.6","ม6", "ม.ปลาย", "มศ5", "มศ.5", "มัธยมปลาย",
                     "ม.ศ.5", "มัธยมศึกษา")
pwch <- c("ปวช.","ปวช", "ป.ว.ช")
pws <- c("ปวส.","ปวส","ป.ว.ส.")
undergrad <- c("ป.ตรี","ปตรี","ป\r\r\nป.ตรี","ป ตรี", "ปริญญาตรี", "ป.ตรี\r\r\nตรี")
master <- c("กำลังเรียนป.โท","บธ.ม","ป.โท","ป.ท","ปริญญาโท")
phd <- c("ป.เอก","Ph.D")
other <- c("พ.บ.","คบ", "ไม่เรียน", "-*", "ไมเรียน","ปวท.","ประกาศนียบัตรวิชาชีพ",
           "อนุปริญญา","-")


combined_info <- combined_info %>%
  mutate(
    education = case_when(
      education %in% primary ~ "ประถม",
      education %in% lower_sec_group ~ "ม.ต้น",
      education %in% upper_sec_group ~ "ม.ปลาย",
      education %in% pwch ~ "ปวช.",
      education %in% pws ~ "ปวส.",
      education %in% undergrad ~ "ปริญญาตรี",
      education %in% master ~ "ปริญญาโท",
      education %in% phd ~ "ปริญญาเอก",
      education %in% other ~ "Other",
      TRUE ~ education
    )
  )

unique(combined_info$education)
```

```{r change caregiver}
unique(combined_info$caregiver)

self <- c("ตนเอง", "มีลูกแต่ไม่ได้ดูแล")
child <- c("ตนเอง,บุตร", "บุตร/ตนเอง", "บุตร", "บุตรสาว")
spouse <- c("ภรรยา อ.พรทิพย์คณะพยาบาล", "ตนเอง/ภรรยา","สามี","ภรรยา", "บุตร,ภรรยา", "บุตร,สามี")
other_fam <- c("หลาน")
other <- c("อื่นๆ")

combined_info <- combined_info %>%
  mutate(
    caregiver = case_when(
      caregiver %in% self ~ "Self",
      caregiver %in% child ~ "Child",
      caregiver %in% spouse ~ "Spouse (Husband/Wife)",
      caregiver %in% other_fam ~ "Other Family Member",
      caregiver %in% other ~ "Other",
      TRUE ~ caregiver
    )
  )
```

```{r change medfinance}
unique(combined_info$medfinancial)
```

```{r}
write_csv(combined_info, "data/combined_info.csv")
```

```{r join_info}
info <- read_csv("data/combined_info.csv")
info_template <- read_csv("info_data_template.csv")

# Get the column names from the template
template_cols <- names(info_template)

# Get the actual data columns that match the template
common_cols <- intersect(template_cols, names(info))

# Step 1: Keep and reorder only matching columns from actual_data
aligned_data <- info %>%
  select(all_of(common_cols))

# Step 2: Add missing columns (in template but not in actual_data)
missing_cols <- setdiff(template_cols, names(aligned_data))
aligned_data[missing_cols] <- NA

# Step 3: Reorder to match the template column order
aligned_data <- aligned_data %>%
  select(all_of(template_cols))
```

```{r}
write_csv(aligned_data, "patient_data.csv")
```


```{r}
# change format of data to be same with app

patient_info <- patient
patient_info <- patient_info %>%
  mutate(
    dob = format(as.Date(dob), "%d/%m/%Y"),
    daystart = format(as.Date(daystart), "%d/%m/%Y")
  )

```


```{r}
patient_test <- patient %>%
  mutate(
    # Step 1: extract year as number
    dob_split = str_split_fixed(dob, "/", 3),
    dob_day = dob_split[,1],
    dob_month = dob_split[,2],
    dob_year = as.integer(dob_split[,3]),

    # Step 2: convert Buddhist year to Gregorian if > 2400
    dob_year = if_else(dob_year > 2400, dob_year - 543, dob_year),

    # Step 3: create standardized dob string in dd/mm/yyyy (Gregorian)
    dob_fixed = paste(dob_day, dob_month, dob_year, sep = "/"),

    # Step 4: convert to Date class
    dob = dmy(dob_fixed),

    # Step 5: calculate age
    age = if_else(!is.na(dob), interval(dob, today()) %/% years(1), NA_integer_)
  ) %>%
  select(-dob_split, -dob_day, -dob_month, -dob_year, -dob_fixed)  # clean up

#remove missing dob by less than 25 years
patient_test <- patient_test %>%
  mutate(
    dob = if_else(age < 25, as.Date(NA), dob))

#re-calculate age
patient_test <- patient_test %>%
  mutate(
    age = if_else(
      !is.na(dob),
      interval(dob, today()) %/% years(1),
      NA_integer_
    )
  )

patient_test %>%
  filter(age <= 25)
```
```{r}
# change day start
# Read data
patient <- read_csv("patient_data.csv")
visit <- read_csv("visit_data.csv")

# Ensure visit_date is Date
visit_data <- visit %>%
  mutate(visit_date = as.Date(visit_date))

# Get the first visit date per HN
first_visits <- visit_data %>%
  group_by(hn) %>%
  summarise(first_visit_date = min(visit_date, na.rm = TRUE), .groups = "drop")

# Convert daystart to Date (assumed format: dd/mm/yyyy) and fill NAs with first visit date
patient_info <- patient %>%
  mutate(
    daystart = dmy(str_trim(daystart))  # parse from character to Date
  ) %>%
  left_join(first_visits, by = "hn") %>%
  mutate(
    daystart = if_else(is.na(daystart), first_visit_date, daystart)
  ) %>%
  select(-first_visit_date)

# Check for NAs or Inf
patient_info %>%
  filter(is.na(daystart) | is.infinite(daystart))
```


```{r}
write_csv(patient_info, "patient_data.csv")
```